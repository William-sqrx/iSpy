// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: route_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from route_data.proto</summary>
public static partial class RouteDataReflection {

  #region Descriptor
  /// <summary>File descriptor for route_data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RouteDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChByb3V0ZV9kYXRhLnByb3RvIroBCglSb3V0ZURhdGESEAoIcm91dGVfaWQY",
          "ASABKAUSFwoPcm91dGVfbWFwX2ltYWdlGAIgASgMEhMKCWRlc3RfZGlzdBgD",
          "IAEoCToAEhcKDWRlc3RfZHVyYXRpb24YBCABKAk6ABIUCgpkaWZmaWN1bHR5",
          "GAUgASgJOgASDwoFbGV2ZWwYBiABKAk6ABITCgd0b2lsZXRzGAcgASgFOgIt",
          "MRIYCgx3YXRlcl9wb2ludHMYCCABKAU6Ai0x"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RouteData), global::RouteData.Parser, new[]{ "RouteId", "RouteMapImage", "DestDist", "DestDuration", "Difficulty", "Level", "Toilets", "WaterPoints" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RouteData : pb::IMessage<RouteData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RouteData> _parser = new pb::MessageParser<RouteData>(() => new RouteData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<RouteData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RouteDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RouteData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RouteData(RouteData other) : this() {
    _hasBits0 = other._hasBits0;
    routeId_ = other.routeId_;
    routeMapImage_ = other.routeMapImage_;
    destDist_ = other.destDist_;
    destDuration_ = other.destDuration_;
    difficulty_ = other.difficulty_;
    level_ = other.level_;
    toilets_ = other.toilets_;
    waterPoints_ = other.waterPoints_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RouteData Clone() {
    return new RouteData(this);
  }

  /// <summary>Field number for the "route_id" field.</summary>
  public const int RouteIdFieldNumber = 1;
  private readonly static int RouteIdDefaultValue = 0;

  private int routeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RouteId {
    get { if ((_hasBits0 & 1) != 0) { return routeId_; } else { return RouteIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      routeId_ = value;
    }
  }
  /// <summary>Gets whether the "route_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRouteId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "route_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRouteId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "route_map_image" field.</summary>
  public const int RouteMapImageFieldNumber = 2;
  private readonly static pb::ByteString RouteMapImageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString routeMapImage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString RouteMapImage {
    get { return routeMapImage_ ?? RouteMapImageDefaultValue; }
    set {
      routeMapImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "route_map_image" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRouteMapImage {
    get { return routeMapImage_ != null; }
  }
  /// <summary>Clears the value of the "route_map_image" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRouteMapImage() {
    routeMapImage_ = null;
  }

  /// <summary>Field number for the "dest_dist" field.</summary>
  public const int DestDistFieldNumber = 3;
  private readonly static string DestDistDefaultValue = "";

  private string destDist_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DestDist {
    get { return destDist_ ?? DestDistDefaultValue; }
    set {
      destDist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dest_dist" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDestDist {
    get { return destDist_ != null; }
  }
  /// <summary>Clears the value of the "dest_dist" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDestDist() {
    destDist_ = null;
  }

  /// <summary>Field number for the "dest_duration" field.</summary>
  public const int DestDurationFieldNumber = 4;
  private readonly static string DestDurationDefaultValue = "";

  private string destDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DestDuration {
    get { return destDuration_ ?? DestDurationDefaultValue; }
    set {
      destDuration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dest_duration" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDestDuration {
    get { return destDuration_ != null; }
  }
  /// <summary>Clears the value of the "dest_duration" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDestDuration() {
    destDuration_ = null;
  }

  /// <summary>Field number for the "difficulty" field.</summary>
  public const int DifficultyFieldNumber = 5;
  private readonly static string DifficultyDefaultValue = "";

  private string difficulty_;
  /// <summary>
  /// running
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Difficulty {
    get { return difficulty_ ?? DifficultyDefaultValue; }
    set {
      difficulty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "difficulty" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDifficulty {
    get { return difficulty_ != null; }
  }
  /// <summary>Clears the value of the "difficulty" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDifficulty() {
    difficulty_ = null;
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 6;
  private readonly static string LevelDefaultValue = "";

  private string level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Level {
    get { return level_ ?? LevelDefaultValue; }
    set {
      level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLevel {
    get { return level_ != null; }
  }
  /// <summary>Clears the value of the "level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLevel() {
    level_ = null;
  }

  /// <summary>Field number for the "toilets" field.</summary>
  public const int ToiletsFieldNumber = 7;
  private readonly static int ToiletsDefaultValue = -1;

  private int toilets_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Toilets {
    get { if ((_hasBits0 & 2) != 0) { return toilets_; } else { return ToiletsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      toilets_ = value;
    }
  }
  /// <summary>Gets whether the "toilets" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasToilets {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "toilets" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearToilets() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "water_points" field.</summary>
  public const int WaterPointsFieldNumber = 8;
  private readonly static int WaterPointsDefaultValue = -1;

  private int waterPoints_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int WaterPoints {
    get { if ((_hasBits0 & 4) != 0) { return waterPoints_; } else { return WaterPointsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      waterPoints_ = value;
    }
  }
  /// <summary>Gets whether the "water_points" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWaterPoints {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "water_points" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWaterPoints() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as RouteData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(RouteData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RouteId != other.RouteId) return false;
    if (RouteMapImage != other.RouteMapImage) return false;
    if (DestDist != other.DestDist) return false;
    if (DestDuration != other.DestDuration) return false;
    if (Difficulty != other.Difficulty) return false;
    if (Level != other.Level) return false;
    if (Toilets != other.Toilets) return false;
    if (WaterPoints != other.WaterPoints) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRouteId) hash ^= RouteId.GetHashCode();
    if (HasRouteMapImage) hash ^= RouteMapImage.GetHashCode();
    if (HasDestDist) hash ^= DestDist.GetHashCode();
    if (HasDestDuration) hash ^= DestDuration.GetHashCode();
    if (HasDifficulty) hash ^= Difficulty.GetHashCode();
    if (HasLevel) hash ^= Level.GetHashCode();
    if (HasToilets) hash ^= Toilets.GetHashCode();
    if (HasWaterPoints) hash ^= WaterPoints.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasRouteId) {
      output.WriteRawTag(8);
      output.WriteInt32(RouteId);
    }
    if (HasRouteMapImage) {
      output.WriteRawTag(18);
      output.WriteBytes(RouteMapImage);
    }
    if (HasDestDist) {
      output.WriteRawTag(26);
      output.WriteString(DestDist);
    }
    if (HasDestDuration) {
      output.WriteRawTag(34);
      output.WriteString(DestDuration);
    }
    if (HasDifficulty) {
      output.WriteRawTag(42);
      output.WriteString(Difficulty);
    }
    if (HasLevel) {
      output.WriteRawTag(50);
      output.WriteString(Level);
    }
    if (HasToilets) {
      output.WriteRawTag(56);
      output.WriteInt32(Toilets);
    }
    if (HasWaterPoints) {
      output.WriteRawTag(64);
      output.WriteInt32(WaterPoints);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasRouteId) {
      output.WriteRawTag(8);
      output.WriteInt32(RouteId);
    }
    if (HasRouteMapImage) {
      output.WriteRawTag(18);
      output.WriteBytes(RouteMapImage);
    }
    if (HasDestDist) {
      output.WriteRawTag(26);
      output.WriteString(DestDist);
    }
    if (HasDestDuration) {
      output.WriteRawTag(34);
      output.WriteString(DestDuration);
    }
    if (HasDifficulty) {
      output.WriteRawTag(42);
      output.WriteString(Difficulty);
    }
    if (HasLevel) {
      output.WriteRawTag(50);
      output.WriteString(Level);
    }
    if (HasToilets) {
      output.WriteRawTag(56);
      output.WriteInt32(Toilets);
    }
    if (HasWaterPoints) {
      output.WriteRawTag(64);
      output.WriteInt32(WaterPoints);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasRouteId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RouteId);
    }
    if (HasRouteMapImage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RouteMapImage);
    }
    if (HasDestDist) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DestDist);
    }
    if (HasDestDuration) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DestDuration);
    }
    if (HasDifficulty) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Difficulty);
    }
    if (HasLevel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
    }
    if (HasToilets) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Toilets);
    }
    if (HasWaterPoints) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaterPoints);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(RouteData other) {
    if (other == null) {
      return;
    }
    if (other.HasRouteId) {
      RouteId = other.RouteId;
    }
    if (other.HasRouteMapImage) {
      RouteMapImage = other.RouteMapImage;
    }
    if (other.HasDestDist) {
      DestDist = other.DestDist;
    }
    if (other.HasDestDuration) {
      DestDuration = other.DestDuration;
    }
    if (other.HasDifficulty) {
      Difficulty = other.Difficulty;
    }
    if (other.HasLevel) {
      Level = other.Level;
    }
    if (other.HasToilets) {
      Toilets = other.Toilets;
    }
    if (other.HasWaterPoints) {
      WaterPoints = other.WaterPoints;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RouteId = input.ReadInt32();
          break;
        }
        case 18: {
          RouteMapImage = input.ReadBytes();
          break;
        }
        case 26: {
          DestDist = input.ReadString();
          break;
        }
        case 34: {
          DestDuration = input.ReadString();
          break;
        }
        case 42: {
          Difficulty = input.ReadString();
          break;
        }
        case 50: {
          Level = input.ReadString();
          break;
        }
        case 56: {
          Toilets = input.ReadInt32();
          break;
        }
        case 64: {
          WaterPoints = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RouteId = input.ReadInt32();
          break;
        }
        case 18: {
          RouteMapImage = input.ReadBytes();
          break;
        }
        case 26: {
          DestDist = input.ReadString();
          break;
        }
        case 34: {
          DestDuration = input.ReadString();
          break;
        }
        case 42: {
          Difficulty = input.ReadString();
          break;
        }
        case 50: {
          Level = input.ReadString();
          break;
        }
        case 56: {
          Toilets = input.ReadInt32();
          break;
        }
        case 64: {
          WaterPoints = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
