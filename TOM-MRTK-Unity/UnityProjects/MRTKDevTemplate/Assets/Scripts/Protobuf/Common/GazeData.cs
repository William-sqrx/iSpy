// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gaze_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gaze_data.proto</summary>
public static partial class GazeDataReflection {

  #region Descriptor
  /// <summary>File descriptor for gaze_data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GazeDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9nYXplX2RhdGEucHJvdG8ivQIKCEdhemVEYXRhEhEKB2RldGFpbHMYAiAB",
          "KAk6ABIYCg1oZWFkX29yaWdpbl94GAMgASgBOgEwEhgKDWhlYWRfb3JpZ2lu",
          "X3kYBCABKAE6ATASGAoNaGVhZF9vcmlnaW5fehgFIAEoAToBMBIVCgpoZWFk",
          "X2Rpcl94GAYgASgBOgEwEhUKCmhlYWRfZGlyX3kYByABKAE6ATASFQoKaGVh",
          "ZF9kaXJfehgIIAEoAToBMBIXCgxleWVfb3JpZ2luX3gYCSABKAE6ATASFwoM",
          "ZXllX29yaWdpbl95GAogASgBOgEwEhcKDGV5ZV9vcmlnaW5fehgLIAEoAToB",
          "MBIUCglleWVfZGlyX3gYDCABKAE6ATASFAoJZXllX2Rpcl95GA0gASgBOgEw",
          "EhQKCWV5ZV9kaXJfehgOIAEoAToBMA=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GazeData), global::GazeData.Parser, new[]{ "Details", "HeadOriginX", "HeadOriginY", "HeadOriginZ", "HeadDirX", "HeadDirY", "HeadDirZ", "EyeOriginX", "EyeOriginY", "EyeOriginZ", "EyeDirX", "EyeDirY", "EyeDirZ" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GazeData : pb::IMessage<GazeData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GazeData> _parser = new pb::MessageParser<GazeData>(() => new GazeData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GazeData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GazeDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GazeData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GazeData(GazeData other) : this() {
    _hasBits0 = other._hasBits0;
    details_ = other.details_;
    headOriginX_ = other.headOriginX_;
    headOriginY_ = other.headOriginY_;
    headOriginZ_ = other.headOriginZ_;
    headDirX_ = other.headDirX_;
    headDirY_ = other.headDirY_;
    headDirZ_ = other.headDirZ_;
    eyeOriginX_ = other.eyeOriginX_;
    eyeOriginY_ = other.eyeOriginY_;
    eyeOriginZ_ = other.eyeOriginZ_;
    eyeDirX_ = other.eyeDirX_;
    eyeDirY_ = other.eyeDirY_;
    eyeDirZ_ = other.eyeDirZ_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GazeData Clone() {
    return new GazeData(this);
  }

  /// <summary>Field number for the "details" field.</summary>
  public const int DetailsFieldNumber = 2;
  private readonly static string DetailsDefaultValue = "";

  private string details_;
  /// <summary>
  ///  optional int64 time = 1 [default = -1];
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Details {
    get { return details_ ?? DetailsDefaultValue; }
    set {
      details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "details" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDetails {
    get { return details_ != null; }
  }
  /// <summary>Clears the value of the "details" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDetails() {
    details_ = null;
  }

  /// <summary>Field number for the "head_origin_x" field.</summary>
  public const int HeadOriginXFieldNumber = 3;
  private readonly static double HeadOriginXDefaultValue = 0D;

  private double headOriginX_;
  /// <summary>
  /// origin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double HeadOriginX {
    get { if ((_hasBits0 & 1) != 0) { return headOriginX_; } else { return HeadOriginXDefaultValue; } }
    set {
      _hasBits0 |= 1;
      headOriginX_ = value;
    }
  }
  /// <summary>Gets whether the "head_origin_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeadOriginX {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "head_origin_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeadOriginX() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "head_origin_y" field.</summary>
  public const int HeadOriginYFieldNumber = 4;
  private readonly static double HeadOriginYDefaultValue = 0D;

  private double headOriginY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double HeadOriginY {
    get { if ((_hasBits0 & 2) != 0) { return headOriginY_; } else { return HeadOriginYDefaultValue; } }
    set {
      _hasBits0 |= 2;
      headOriginY_ = value;
    }
  }
  /// <summary>Gets whether the "head_origin_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeadOriginY {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "head_origin_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeadOriginY() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "head_origin_z" field.</summary>
  public const int HeadOriginZFieldNumber = 5;
  private readonly static double HeadOriginZDefaultValue = 0D;

  private double headOriginZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double HeadOriginZ {
    get { if ((_hasBits0 & 4) != 0) { return headOriginZ_; } else { return HeadOriginZDefaultValue; } }
    set {
      _hasBits0 |= 4;
      headOriginZ_ = value;
    }
  }
  /// <summary>Gets whether the "head_origin_z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeadOriginZ {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "head_origin_z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeadOriginZ() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "head_dir_x" field.</summary>
  public const int HeadDirXFieldNumber = 6;
  private readonly static double HeadDirXDefaultValue = 0D;

  private double headDirX_;
  /// <summary>
  /// direction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double HeadDirX {
    get { if ((_hasBits0 & 8) != 0) { return headDirX_; } else { return HeadDirXDefaultValue; } }
    set {
      _hasBits0 |= 8;
      headDirX_ = value;
    }
  }
  /// <summary>Gets whether the "head_dir_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeadDirX {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "head_dir_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeadDirX() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "head_dir_y" field.</summary>
  public const int HeadDirYFieldNumber = 7;
  private readonly static double HeadDirYDefaultValue = 0D;

  private double headDirY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double HeadDirY {
    get { if ((_hasBits0 & 16) != 0) { return headDirY_; } else { return HeadDirYDefaultValue; } }
    set {
      _hasBits0 |= 16;
      headDirY_ = value;
    }
  }
  /// <summary>Gets whether the "head_dir_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeadDirY {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "head_dir_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeadDirY() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "head_dir_z" field.</summary>
  public const int HeadDirZFieldNumber = 8;
  private readonly static double HeadDirZDefaultValue = 0D;

  private double headDirZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double HeadDirZ {
    get { if ((_hasBits0 & 32) != 0) { return headDirZ_; } else { return HeadDirZDefaultValue; } }
    set {
      _hasBits0 |= 32;
      headDirZ_ = value;
    }
  }
  /// <summary>Gets whether the "head_dir_z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHeadDirZ {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "head_dir_z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHeadDirZ() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "eye_origin_x" field.</summary>
  public const int EyeOriginXFieldNumber = 9;
  private readonly static double EyeOriginXDefaultValue = 0D;

  private double eyeOriginX_;
  /// <summary>
  /// origin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EyeOriginX {
    get { if ((_hasBits0 & 64) != 0) { return eyeOriginX_; } else { return EyeOriginXDefaultValue; } }
    set {
      _hasBits0 |= 64;
      eyeOriginX_ = value;
    }
  }
  /// <summary>Gets whether the "eye_origin_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEyeOriginX {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "eye_origin_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEyeOriginX() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "eye_origin_y" field.</summary>
  public const int EyeOriginYFieldNumber = 10;
  private readonly static double EyeOriginYDefaultValue = 0D;

  private double eyeOriginY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EyeOriginY {
    get { if ((_hasBits0 & 128) != 0) { return eyeOriginY_; } else { return EyeOriginYDefaultValue; } }
    set {
      _hasBits0 |= 128;
      eyeOriginY_ = value;
    }
  }
  /// <summary>Gets whether the "eye_origin_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEyeOriginY {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "eye_origin_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEyeOriginY() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "eye_origin_z" field.</summary>
  public const int EyeOriginZFieldNumber = 11;
  private readonly static double EyeOriginZDefaultValue = 0D;

  private double eyeOriginZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EyeOriginZ {
    get { if ((_hasBits0 & 256) != 0) { return eyeOriginZ_; } else { return EyeOriginZDefaultValue; } }
    set {
      _hasBits0 |= 256;
      eyeOriginZ_ = value;
    }
  }
  /// <summary>Gets whether the "eye_origin_z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEyeOriginZ {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "eye_origin_z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEyeOriginZ() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "eye_dir_x" field.</summary>
  public const int EyeDirXFieldNumber = 12;
  private readonly static double EyeDirXDefaultValue = 0D;

  private double eyeDirX_;
  /// <summary>
  /// direction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EyeDirX {
    get { if ((_hasBits0 & 512) != 0) { return eyeDirX_; } else { return EyeDirXDefaultValue; } }
    set {
      _hasBits0 |= 512;
      eyeDirX_ = value;
    }
  }
  /// <summary>Gets whether the "eye_dir_x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEyeDirX {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "eye_dir_x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEyeDirX() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "eye_dir_y" field.</summary>
  public const int EyeDirYFieldNumber = 13;
  private readonly static double EyeDirYDefaultValue = 0D;

  private double eyeDirY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EyeDirY {
    get { if ((_hasBits0 & 1024) != 0) { return eyeDirY_; } else { return EyeDirYDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      eyeDirY_ = value;
    }
  }
  /// <summary>Gets whether the "eye_dir_y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEyeDirY {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "eye_dir_y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEyeDirY() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "eye_dir_z" field.</summary>
  public const int EyeDirZFieldNumber = 14;
  private readonly static double EyeDirZDefaultValue = 0D;

  private double eyeDirZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EyeDirZ {
    get { if ((_hasBits0 & 2048) != 0) { return eyeDirZ_; } else { return EyeDirZDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      eyeDirZ_ = value;
    }
  }
  /// <summary>Gets whether the "eye_dir_z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEyeDirZ {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "eye_dir_z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEyeDirZ() {
    _hasBits0 &= ~2048;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GazeData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GazeData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Details != other.Details) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeadOriginX, other.HeadOriginX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeadOriginY, other.HeadOriginY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeadOriginZ, other.HeadOriginZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeadDirX, other.HeadDirX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeadDirY, other.HeadDirY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeadDirZ, other.HeadDirZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyeOriginX, other.EyeOriginX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyeOriginY, other.EyeOriginY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyeOriginZ, other.EyeOriginZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyeDirX, other.EyeDirX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyeDirY, other.EyeDirY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyeDirZ, other.EyeDirZ)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDetails) hash ^= Details.GetHashCode();
    if (HasHeadOriginX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeadOriginX);
    if (HasHeadOriginY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeadOriginY);
    if (HasHeadOriginZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeadOriginZ);
    if (HasHeadDirX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeadDirX);
    if (HasHeadDirY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeadDirY);
    if (HasHeadDirZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeadDirZ);
    if (HasEyeOriginX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyeOriginX);
    if (HasEyeOriginY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyeOriginY);
    if (HasEyeOriginZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyeOriginZ);
    if (HasEyeDirX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyeDirX);
    if (HasEyeDirY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyeDirY);
    if (HasEyeDirZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyeDirZ);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDetails) {
      output.WriteRawTag(18);
      output.WriteString(Details);
    }
    if (HasHeadOriginX) {
      output.WriteRawTag(25);
      output.WriteDouble(HeadOriginX);
    }
    if (HasHeadOriginY) {
      output.WriteRawTag(33);
      output.WriteDouble(HeadOriginY);
    }
    if (HasHeadOriginZ) {
      output.WriteRawTag(41);
      output.WriteDouble(HeadOriginZ);
    }
    if (HasHeadDirX) {
      output.WriteRawTag(49);
      output.WriteDouble(HeadDirX);
    }
    if (HasHeadDirY) {
      output.WriteRawTag(57);
      output.WriteDouble(HeadDirY);
    }
    if (HasHeadDirZ) {
      output.WriteRawTag(65);
      output.WriteDouble(HeadDirZ);
    }
    if (HasEyeOriginX) {
      output.WriteRawTag(73);
      output.WriteDouble(EyeOriginX);
    }
    if (HasEyeOriginY) {
      output.WriteRawTag(81);
      output.WriteDouble(EyeOriginY);
    }
    if (HasEyeOriginZ) {
      output.WriteRawTag(89);
      output.WriteDouble(EyeOriginZ);
    }
    if (HasEyeDirX) {
      output.WriteRawTag(97);
      output.WriteDouble(EyeDirX);
    }
    if (HasEyeDirY) {
      output.WriteRawTag(105);
      output.WriteDouble(EyeDirY);
    }
    if (HasEyeDirZ) {
      output.WriteRawTag(113);
      output.WriteDouble(EyeDirZ);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDetails) {
      output.WriteRawTag(18);
      output.WriteString(Details);
    }
    if (HasHeadOriginX) {
      output.WriteRawTag(25);
      output.WriteDouble(HeadOriginX);
    }
    if (HasHeadOriginY) {
      output.WriteRawTag(33);
      output.WriteDouble(HeadOriginY);
    }
    if (HasHeadOriginZ) {
      output.WriteRawTag(41);
      output.WriteDouble(HeadOriginZ);
    }
    if (HasHeadDirX) {
      output.WriteRawTag(49);
      output.WriteDouble(HeadDirX);
    }
    if (HasHeadDirY) {
      output.WriteRawTag(57);
      output.WriteDouble(HeadDirY);
    }
    if (HasHeadDirZ) {
      output.WriteRawTag(65);
      output.WriteDouble(HeadDirZ);
    }
    if (HasEyeOriginX) {
      output.WriteRawTag(73);
      output.WriteDouble(EyeOriginX);
    }
    if (HasEyeOriginY) {
      output.WriteRawTag(81);
      output.WriteDouble(EyeOriginY);
    }
    if (HasEyeOriginZ) {
      output.WriteRawTag(89);
      output.WriteDouble(EyeOriginZ);
    }
    if (HasEyeDirX) {
      output.WriteRawTag(97);
      output.WriteDouble(EyeDirX);
    }
    if (HasEyeDirY) {
      output.WriteRawTag(105);
      output.WriteDouble(EyeDirY);
    }
    if (HasEyeDirZ) {
      output.WriteRawTag(113);
      output.WriteDouble(EyeDirZ);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDetails) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
    }
    if (HasHeadOriginX) {
      size += 1 + 8;
    }
    if (HasHeadOriginY) {
      size += 1 + 8;
    }
    if (HasHeadOriginZ) {
      size += 1 + 8;
    }
    if (HasHeadDirX) {
      size += 1 + 8;
    }
    if (HasHeadDirY) {
      size += 1 + 8;
    }
    if (HasHeadDirZ) {
      size += 1 + 8;
    }
    if (HasEyeOriginX) {
      size += 1 + 8;
    }
    if (HasEyeOriginY) {
      size += 1 + 8;
    }
    if (HasEyeOriginZ) {
      size += 1 + 8;
    }
    if (HasEyeDirX) {
      size += 1 + 8;
    }
    if (HasEyeDirY) {
      size += 1 + 8;
    }
    if (HasEyeDirZ) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GazeData other) {
    if (other == null) {
      return;
    }
    if (other.HasDetails) {
      Details = other.Details;
    }
    if (other.HasHeadOriginX) {
      HeadOriginX = other.HeadOriginX;
    }
    if (other.HasHeadOriginY) {
      HeadOriginY = other.HeadOriginY;
    }
    if (other.HasHeadOriginZ) {
      HeadOriginZ = other.HeadOriginZ;
    }
    if (other.HasHeadDirX) {
      HeadDirX = other.HeadDirX;
    }
    if (other.HasHeadDirY) {
      HeadDirY = other.HeadDirY;
    }
    if (other.HasHeadDirZ) {
      HeadDirZ = other.HeadDirZ;
    }
    if (other.HasEyeOriginX) {
      EyeOriginX = other.EyeOriginX;
    }
    if (other.HasEyeOriginY) {
      EyeOriginY = other.EyeOriginY;
    }
    if (other.HasEyeOriginZ) {
      EyeOriginZ = other.EyeOriginZ;
    }
    if (other.HasEyeDirX) {
      EyeDirX = other.EyeDirX;
    }
    if (other.HasEyeDirY) {
      EyeDirY = other.EyeDirY;
    }
    if (other.HasEyeDirZ) {
      EyeDirZ = other.EyeDirZ;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          Details = input.ReadString();
          break;
        }
        case 25: {
          HeadOriginX = input.ReadDouble();
          break;
        }
        case 33: {
          HeadOriginY = input.ReadDouble();
          break;
        }
        case 41: {
          HeadOriginZ = input.ReadDouble();
          break;
        }
        case 49: {
          HeadDirX = input.ReadDouble();
          break;
        }
        case 57: {
          HeadDirY = input.ReadDouble();
          break;
        }
        case 65: {
          HeadDirZ = input.ReadDouble();
          break;
        }
        case 73: {
          EyeOriginX = input.ReadDouble();
          break;
        }
        case 81: {
          EyeOriginY = input.ReadDouble();
          break;
        }
        case 89: {
          EyeOriginZ = input.ReadDouble();
          break;
        }
        case 97: {
          EyeDirX = input.ReadDouble();
          break;
        }
        case 105: {
          EyeDirY = input.ReadDouble();
          break;
        }
        case 113: {
          EyeDirZ = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 18: {
          Details = input.ReadString();
          break;
        }
        case 25: {
          HeadOriginX = input.ReadDouble();
          break;
        }
        case 33: {
          HeadOriginY = input.ReadDouble();
          break;
        }
        case 41: {
          HeadOriginZ = input.ReadDouble();
          break;
        }
        case 49: {
          HeadDirX = input.ReadDouble();
          break;
        }
        case 57: {
          HeadDirY = input.ReadDouble();
          break;
        }
        case 65: {
          HeadDirZ = input.ReadDouble();
          break;
        }
        case 73: {
          EyeOriginX = input.ReadDouble();
          break;
        }
        case 81: {
          EyeOriginY = input.ReadDouble();
          break;
        }
        case 89: {
          EyeOriginZ = input.ReadDouble();
          break;
        }
        case 97: {
          EyeDirX = input.ReadDouble();
          break;
        }
        case 105: {
          EyeDirY = input.ReadDouble();
          break;
        }
        case 113: {
          EyeDirZ = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
