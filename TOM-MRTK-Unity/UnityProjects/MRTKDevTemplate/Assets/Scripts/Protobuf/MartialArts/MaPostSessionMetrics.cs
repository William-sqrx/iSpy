// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ma_post_session_metrics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ma_post_session_metrics.proto</summary>
public static partial class MaPostSessionMetricsReflection {

  #region Descriptor
  /// <summary>File descriptor for ma_post_session_metrics.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MaPostSessionMetricsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch1tYV9wb3N0X3Nlc3Npb25fbWV0cmljcy5wcm90byKyAQoUTWFQb3N0U2Vz",
          "c2lvbk1ldHJpY3MSFQoNdG90YWxfcHVuY2hlcxgBIAIoBRIXCg9jb3JyZWN0",
          "X3B1bmNoZXMYAiACKAUSGgoSb2ZmX3RhcmdldF9wdW5jaGVzGAMgAigFEhkK",
          "EWJhZF9hbmdsZV9wdW5jaGVzGAQgAigFEhkKEWF2Z19yZWFjdGlvbl90aW1l",
          "GAYgAigCEhgKEHNlc3Npb25fZHVyYXRpb24YByACKAk="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MaPostSessionMetrics), global::MaPostSessionMetrics.Parser, new[]{ "TotalPunches", "CorrectPunches", "OffTargetPunches", "BadAnglePunches", "AvgReactionTime", "SessionDuration" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class MaPostSessionMetrics : pb::IMessage<MaPostSessionMetrics>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MaPostSessionMetrics> _parser = new pb::MessageParser<MaPostSessionMetrics>(() => new MaPostSessionMetrics());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<MaPostSessionMetrics> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MaPostSessionMetricsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MaPostSessionMetrics() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MaPostSessionMetrics(MaPostSessionMetrics other) : this() {
    _hasBits0 = other._hasBits0;
    totalPunches_ = other.totalPunches_;
    correctPunches_ = other.correctPunches_;
    offTargetPunches_ = other.offTargetPunches_;
    badAnglePunches_ = other.badAnglePunches_;
    avgReactionTime_ = other.avgReactionTime_;
    sessionDuration_ = other.sessionDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MaPostSessionMetrics Clone() {
    return new MaPostSessionMetrics(this);
  }

  /// <summary>Field number for the "total_punches" field.</summary>
  public const int TotalPunchesFieldNumber = 1;
  private readonly static int TotalPunchesDefaultValue = 0;

  private int totalPunches_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TotalPunches {
    get { if ((_hasBits0 & 1) != 0) { return totalPunches_; } else { return TotalPunchesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      totalPunches_ = value;
    }
  }
  /// <summary>Gets whether the "total_punches" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTotalPunches {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "total_punches" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTotalPunches() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "correct_punches" field.</summary>
  public const int CorrectPunchesFieldNumber = 2;
  private readonly static int CorrectPunchesDefaultValue = 0;

  private int correctPunches_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CorrectPunches {
    get { if ((_hasBits0 & 2) != 0) { return correctPunches_; } else { return CorrectPunchesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      correctPunches_ = value;
    }
  }
  /// <summary>Gets whether the "correct_punches" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCorrectPunches {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "correct_punches" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCorrectPunches() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "off_target_punches" field.</summary>
  public const int OffTargetPunchesFieldNumber = 3;
  private readonly static int OffTargetPunchesDefaultValue = 0;

  private int offTargetPunches_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int OffTargetPunches {
    get { if ((_hasBits0 & 4) != 0) { return offTargetPunches_; } else { return OffTargetPunchesDefaultValue; } }
    set {
      _hasBits0 |= 4;
      offTargetPunches_ = value;
    }
  }
  /// <summary>Gets whether the "off_target_punches" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOffTargetPunches {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "off_target_punches" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOffTargetPunches() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "bad_angle_punches" field.</summary>
  public const int BadAnglePunchesFieldNumber = 4;
  private readonly static int BadAnglePunchesDefaultValue = 0;

  private int badAnglePunches_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BadAnglePunches {
    get { if ((_hasBits0 & 8) != 0) { return badAnglePunches_; } else { return BadAnglePunchesDefaultValue; } }
    set {
      _hasBits0 |= 8;
      badAnglePunches_ = value;
    }
  }
  /// <summary>Gets whether the "bad_angle_punches" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBadAnglePunches {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "bad_angle_punches" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBadAnglePunches() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "avg_reaction_time" field.</summary>
  public const int AvgReactionTimeFieldNumber = 6;
  private readonly static float AvgReactionTimeDefaultValue = 0F;

  private float avgReactionTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AvgReactionTime {
    get { if ((_hasBits0 & 16) != 0) { return avgReactionTime_; } else { return AvgReactionTimeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      avgReactionTime_ = value;
    }
  }
  /// <summary>Gets whether the "avg_reaction_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAvgReactionTime {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "avg_reaction_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAvgReactionTime() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "session_duration" field.</summary>
  public const int SessionDurationFieldNumber = 7;
  private readonly static string SessionDurationDefaultValue = "";

  private string sessionDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionDuration {
    get { return sessionDuration_ ?? SessionDurationDefaultValue; }
    set {
      sessionDuration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "session_duration" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionDuration {
    get { return sessionDuration_ != null; }
  }
  /// <summary>Clears the value of the "session_duration" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionDuration() {
    sessionDuration_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as MaPostSessionMetrics);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(MaPostSessionMetrics other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TotalPunches != other.TotalPunches) return false;
    if (CorrectPunches != other.CorrectPunches) return false;
    if (OffTargetPunches != other.OffTargetPunches) return false;
    if (BadAnglePunches != other.BadAnglePunches) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgReactionTime, other.AvgReactionTime)) return false;
    if (SessionDuration != other.SessionDuration) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTotalPunches) hash ^= TotalPunches.GetHashCode();
    if (HasCorrectPunches) hash ^= CorrectPunches.GetHashCode();
    if (HasOffTargetPunches) hash ^= OffTargetPunches.GetHashCode();
    if (HasBadAnglePunches) hash ^= BadAnglePunches.GetHashCode();
    if (HasAvgReactionTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgReactionTime);
    if (HasSessionDuration) hash ^= SessionDuration.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTotalPunches) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalPunches);
    }
    if (HasCorrectPunches) {
      output.WriteRawTag(16);
      output.WriteInt32(CorrectPunches);
    }
    if (HasOffTargetPunches) {
      output.WriteRawTag(24);
      output.WriteInt32(OffTargetPunches);
    }
    if (HasBadAnglePunches) {
      output.WriteRawTag(32);
      output.WriteInt32(BadAnglePunches);
    }
    if (HasAvgReactionTime) {
      output.WriteRawTag(53);
      output.WriteFloat(AvgReactionTime);
    }
    if (HasSessionDuration) {
      output.WriteRawTag(58);
      output.WriteString(SessionDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTotalPunches) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalPunches);
    }
    if (HasCorrectPunches) {
      output.WriteRawTag(16);
      output.WriteInt32(CorrectPunches);
    }
    if (HasOffTargetPunches) {
      output.WriteRawTag(24);
      output.WriteInt32(OffTargetPunches);
    }
    if (HasBadAnglePunches) {
      output.WriteRawTag(32);
      output.WriteInt32(BadAnglePunches);
    }
    if (HasAvgReactionTime) {
      output.WriteRawTag(53);
      output.WriteFloat(AvgReactionTime);
    }
    if (HasSessionDuration) {
      output.WriteRawTag(58);
      output.WriteString(SessionDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTotalPunches) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPunches);
    }
    if (HasCorrectPunches) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CorrectPunches);
    }
    if (HasOffTargetPunches) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffTargetPunches);
    }
    if (HasBadAnglePunches) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadAnglePunches);
    }
    if (HasAvgReactionTime) {
      size += 1 + 4;
    }
    if (HasSessionDuration) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionDuration);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(MaPostSessionMetrics other) {
    if (other == null) {
      return;
    }
    if (other.HasTotalPunches) {
      TotalPunches = other.TotalPunches;
    }
    if (other.HasCorrectPunches) {
      CorrectPunches = other.CorrectPunches;
    }
    if (other.HasOffTargetPunches) {
      OffTargetPunches = other.OffTargetPunches;
    }
    if (other.HasBadAnglePunches) {
      BadAnglePunches = other.BadAnglePunches;
    }
    if (other.HasAvgReactionTime) {
      AvgReactionTime = other.AvgReactionTime;
    }
    if (other.HasSessionDuration) {
      SessionDuration = other.SessionDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TotalPunches = input.ReadInt32();
          break;
        }
        case 16: {
          CorrectPunches = input.ReadInt32();
          break;
        }
        case 24: {
          OffTargetPunches = input.ReadInt32();
          break;
        }
        case 32: {
          BadAnglePunches = input.ReadInt32();
          break;
        }
        case 53: {
          AvgReactionTime = input.ReadFloat();
          break;
        }
        case 58: {
          SessionDuration = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TotalPunches = input.ReadInt32();
          break;
        }
        case 16: {
          CorrectPunches = input.ReadInt32();
          break;
        }
        case 24: {
          OffTargetPunches = input.ReadInt32();
          break;
        }
        case 32: {
          BadAnglePunches = input.ReadInt32();
          break;
        }
        case 53: {
          AvgReactionTime = input.ReadFloat();
          break;
        }
        case 58: {
          SessionDuration = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
