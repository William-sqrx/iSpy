// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ma_collision_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ma_collision_data.proto</summary>
public static partial class MaCollisionDataReflection {

  #region Descriptor
  /// <summary>File descriptor for ma_collision_data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MaCollisionDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdtYV9jb2xsaXNpb25fZGF0YS5wcm90bxoPbWFfdmVjdG9yLnByb3RvIrYB",
          "Cg9NYUNvbGxpc2lvbkRhdGESGwoIdmVsb2NpdHkYASABKAsyCS5NYVZlY3Rv",
          "chIiCg9jb2xsaXNpb25fcG9pbnQYAiABKAsyCS5NYVZlY3RvchIfCgxwYWRf",
          "cG9zaXRpb24YAyABKAsyCS5NYVZlY3RvchIdChJkaXN0YW5jZV90b190YXJn",
          "ZXQYBCABKAI6ATASEAoFYW5nbGUYBSABKAI6ATASEAoEaGFuZBgGIAEoBToC",
          "LTE="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::MaVectorReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MaCollisionData), global::MaCollisionData.Parser, new[]{ "Velocity", "CollisionPoint", "PadPosition", "DistanceToTarget", "Angle", "Hand" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class MaCollisionData : pb::IMessage<MaCollisionData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MaCollisionData> _parser = new pb::MessageParser<MaCollisionData>(() => new MaCollisionData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<MaCollisionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MaCollisionDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MaCollisionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MaCollisionData(MaCollisionData other) : this() {
    _hasBits0 = other._hasBits0;
    velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
    collisionPoint_ = other.collisionPoint_ != null ? other.collisionPoint_.Clone() : null;
    padPosition_ = other.padPosition_ != null ? other.padPosition_.Clone() : null;
    distanceToTarget_ = other.distanceToTarget_;
    angle_ = other.angle_;
    hand_ = other.hand_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MaCollisionData Clone() {
    return new MaCollisionData(this);
  }

  /// <summary>Field number for the "velocity" field.</summary>
  public const int VelocityFieldNumber = 1;
  private global::MaVector velocity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MaVector Velocity {
    get { return velocity_; }
    set {
      velocity_ = value;
    }
  }

  /// <summary>Field number for the "collision_point" field.</summary>
  public const int CollisionPointFieldNumber = 2;
  private global::MaVector collisionPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MaVector CollisionPoint {
    get { return collisionPoint_; }
    set {
      collisionPoint_ = value;
    }
  }

  /// <summary>Field number for the "pad_position" field.</summary>
  public const int PadPositionFieldNumber = 3;
  private global::MaVector padPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MaVector PadPosition {
    get { return padPosition_; }
    set {
      padPosition_ = value;
    }
  }

  /// <summary>Field number for the "distance_to_target" field.</summary>
  public const int DistanceToTargetFieldNumber = 4;
  private readonly static float DistanceToTargetDefaultValue = 0F;

  private float distanceToTarget_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DistanceToTarget {
    get { if ((_hasBits0 & 1) != 0) { return distanceToTarget_; } else { return DistanceToTargetDefaultValue; } }
    set {
      _hasBits0 |= 1;
      distanceToTarget_ = value;
    }
  }
  /// <summary>Gets whether the "distance_to_target" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDistanceToTarget {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "distance_to_target" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDistanceToTarget() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 5;
  private readonly static float AngleDefaultValue = 0F;

  private float angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Angle {
    get { if ((_hasBits0 & 2) != 0) { return angle_; } else { return AngleDefaultValue; } }
    set {
      _hasBits0 |= 2;
      angle_ = value;
    }
  }
  /// <summary>Gets whether the "angle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAngle {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "angle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAngle() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "hand" field.</summary>
  public const int HandFieldNumber = 6;
  private readonly static int HandDefaultValue = -1;

  private int hand_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Hand {
    get { if ((_hasBits0 & 4) != 0) { return hand_; } else { return HandDefaultValue; } }
    set {
      _hasBits0 |= 4;
      hand_ = value;
    }
  }
  /// <summary>Gets whether the "hand" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHand {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "hand" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHand() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as MaCollisionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(MaCollisionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Velocity, other.Velocity)) return false;
    if (!object.Equals(CollisionPoint, other.CollisionPoint)) return false;
    if (!object.Equals(PadPosition, other.PadPosition)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistanceToTarget, other.DistanceToTarget)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
    if (Hand != other.Hand) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (velocity_ != null) hash ^= Velocity.GetHashCode();
    if (collisionPoint_ != null) hash ^= CollisionPoint.GetHashCode();
    if (padPosition_ != null) hash ^= PadPosition.GetHashCode();
    if (HasDistanceToTarget) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistanceToTarget);
    if (HasAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
    if (HasHand) hash ^= Hand.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (velocity_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Velocity);
    }
    if (collisionPoint_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CollisionPoint);
    }
    if (padPosition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PadPosition);
    }
    if (HasDistanceToTarget) {
      output.WriteRawTag(37);
      output.WriteFloat(DistanceToTarget);
    }
    if (HasAngle) {
      output.WriteRawTag(45);
      output.WriteFloat(Angle);
    }
    if (HasHand) {
      output.WriteRawTag(48);
      output.WriteInt32(Hand);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (velocity_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Velocity);
    }
    if (collisionPoint_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CollisionPoint);
    }
    if (padPosition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PadPosition);
    }
    if (HasDistanceToTarget) {
      output.WriteRawTag(37);
      output.WriteFloat(DistanceToTarget);
    }
    if (HasAngle) {
      output.WriteRawTag(45);
      output.WriteFloat(Angle);
    }
    if (HasHand) {
      output.WriteRawTag(48);
      output.WriteInt32(Hand);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (velocity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
    }
    if (collisionPoint_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollisionPoint);
    }
    if (padPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PadPosition);
    }
    if (HasDistanceToTarget) {
      size += 1 + 4;
    }
    if (HasAngle) {
      size += 1 + 4;
    }
    if (HasHand) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hand);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(MaCollisionData other) {
    if (other == null) {
      return;
    }
    if (other.velocity_ != null) {
      if (velocity_ == null) {
        Velocity = new global::MaVector();
      }
      Velocity.MergeFrom(other.Velocity);
    }
    if (other.collisionPoint_ != null) {
      if (collisionPoint_ == null) {
        CollisionPoint = new global::MaVector();
      }
      CollisionPoint.MergeFrom(other.CollisionPoint);
    }
    if (other.padPosition_ != null) {
      if (padPosition_ == null) {
        PadPosition = new global::MaVector();
      }
      PadPosition.MergeFrom(other.PadPosition);
    }
    if (other.HasDistanceToTarget) {
      DistanceToTarget = other.DistanceToTarget;
    }
    if (other.HasAngle) {
      Angle = other.Angle;
    }
    if (other.HasHand) {
      Hand = other.Hand;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (velocity_ == null) {
            Velocity = new global::MaVector();
          }
          input.ReadMessage(Velocity);
          break;
        }
        case 18: {
          if (collisionPoint_ == null) {
            CollisionPoint = new global::MaVector();
          }
          input.ReadMessage(CollisionPoint);
          break;
        }
        case 26: {
          if (padPosition_ == null) {
            PadPosition = new global::MaVector();
          }
          input.ReadMessage(PadPosition);
          break;
        }
        case 37: {
          DistanceToTarget = input.ReadFloat();
          break;
        }
        case 45: {
          Angle = input.ReadFloat();
          break;
        }
        case 48: {
          Hand = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (velocity_ == null) {
            Velocity = new global::MaVector();
          }
          input.ReadMessage(Velocity);
          break;
        }
        case 18: {
          if (collisionPoint_ == null) {
            CollisionPoint = new global::MaVector();
          }
          input.ReadMessage(CollisionPoint);
          break;
        }
        case 26: {
          if (padPosition_ == null) {
            PadPosition = new global::MaVector();
          }
          input.ReadMessage(PadPosition);
          break;
        }
        case 37: {
          DistanceToTarget = input.ReadFloat();
          break;
        }
        case 45: {
          Angle = input.ReadFloat();
          break;
        }
        case 48: {
          Hand = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
